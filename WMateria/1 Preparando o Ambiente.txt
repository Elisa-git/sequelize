Passo 1

 - Init
 - Instalar express, body-parser e nodemon

Passo 2
 
 - Criar um diretório "api", a fim de serparar os arquivos de configuração dos diretórios criados a seguir para a api.
 - Fazer arquivo entry point "index.js" como indicado no package.json (dentro do diretório api, lembrando que se alterar o caminho do arquivo, o mesmo deve ser indicado no package.json).

Passo 3

 No entry point
 - Importar as bibliotecas e o body-parser
 - Criar a const app para inicializar o express. Através dela serão declarados os métodos.
 - Criar o método use que terá como parâmetro o bodyParser e o json, indicando que o body-parser pegará as resquisições que chegar e converter para json.
 - Declarar como constante a porta 3000.
 - Declarar um método get de teste que retornará uma mensagem caso a conexão dê certo.
 - Declarar um listen para ele analisar o status do servidor, ele terá como parâmetro a porta e um parâmetro vazio que retornará uma mensagem caso esteja tudo ok.
 - Exportar o app para que ele se disponibilize para a aplicação.

****

  const express = require('express');
  const bodyParser = require('body-parser');

  const app = express();

  app.use(bodyParser.json());

  const port = 3000;

  app.get('/teste', (req, res) => res
      .status(200)
      .send({mensagem: 'Deu certo!'})
  );

  app.listen(port, () => console.lnpxog(`Servidor rodando na porta ${port}`));

  module.exports = app;

****

Passo 4

 No package.json
 - Na parte de scripts, adicionar o start passando o nodemon e entry point para que ele possa atualizá-los automaticamente.

****

  "scripts": {
    "start": "nodemon ./api/index.js",

****

Passo 5

 - Instalar o mysql "npm i mysql2"
 - Instalar o sequelize coms suas dependências " npm i sequelize sequelize-cli path" (cli - comand liune interface - é usado para usar os recursos de linha de comando para se conectar no banco, criar de modelos, etc)
 - Criar o projeto do sequelize através do init "npx sequelize-cli init" que criará 4 pastas.
 - Passar os arquivos para dentro da pasta api, contudo é preciso indicar que isso foi feito. Dessa forma, crie o arquivo (na raiz) .sequelizerc para estruturar a aplicação com hierarquia de pastas.
 - Configurar a .sequelizerc com os comando que indicarão os novos caminhos de cada arquivo (o código desse arquivo está disponível na documentação do sequelize)

****

  const path = require('path');

  module.exports = {
    'config': path.resolve('./api/config', 'config.json'),
    'models-path': path.resolve('./api/models'),
    'seeders-path': path.resolve('./api/seeders'),
    'migrations-path': path.resolve('./api/migrations')
  }

****

Passo 6

 - Conectar com o banco através do terminal
 - Criar database "create database nome;"
 - Informar ao programa a existência da database criada. Ao instalar o sequelize, uma das pastas criadas foi a config. 
   - Acesse o arquivo config.json e na parte de desenvolvimento adeque os parâmetros indicados aos parâmetros do banco.