R - Read

Pegar todos os resultados: 
 - Find all


Pegar um resultado específico:

Passo 1 

 - Fazer uma função statica e assíncrona que terá como parâmetros req e res
 - Criar uma const que indique o id passado para o sequelize, essa const vai receber params.
 - Fazer um try com uma const que guardará o resultado do que foi buscado no banco e mostrará uma mensagem de sucesso (findOne). 
  - Esse findOnde tem como parâmetro o where que indica que retornará uma resposta somente se o id solicitado for igual ao encontrado.
 - Fazer um cath tendo error como parâmetro, para caso o try dê errado

Passo 2

 - Avisar no arquivo de notas da classe que há uma nova rota.
 - Criar um get o parâmetro rota deve ter /:id para indicar que ela receberá um id

****

    static async pegaUmRegistroPessoa(req, res) {
        const { id } = req.params;
        try {               // os parâmetros devem entrar em forma de objeto, por isso o {}
        
            const umaPessoa = await database.Pessoas.findOne({
                where: {
                    id: Number(id) 
                }
            });
        
            return res.status(200).json(umaPessoa);
        
        } catch (error) {
        
            return res.status(500).json(error.message);
        
        }
    }

****

C - Create

Criar registros:

Passo 1

 - Fazer uma função statica e assíncrona que terá como parâmetros req e res
 - Criar uma const que vai receber req.body (as informações no corpo da requisição)
 - Fazer um try com uma const que guardará o resultado do que foi criado no banco (create), mostrará uma mensagem de sucesso e as informações inseridas.
  - O create vai fazer um novo registro baseado na informação passada no req.body  
 - Fazer um cath tendo error como parâmetro, para caso o try dê errado

Passo 2

 - Avisar no arquivo de notas da classe que há uma nova rota.
 - Criar uma rota post tendo como parâmetro a rota e a função.

****

    static async criaPessoa(req, res) {
        const novaPessoa = req.body;
        try {

            const novaPessoaCriada = await database.Pessoas.create(novaPessoa);
            return res.status(200).json(novaPessoaCriada);

        } catch (error) {

            return res.status(500).json(error.message);

        }
    }

****

U - Update

Atualizar registros:

Passo 1

 - Fazer uma função statica e assíncrona que terá como parâmetros req e res
 - Criar uma const que vai receber req.body (as informações no corpo da requisição)
 - Criar uma const que indique o id passado para o sequelize, essa const vai receber params.
 - Fazer um try que guardará o resultado do que será atualizado no banco (update).
  - O update receberá como parâmetros a const que recebeu as informações passadas no req.body e o where que indica que retornará uma resposta somente se o id solicitado for igual ao encontrado.
  - O update só recebe como resposta 0 ou 1. Dessa forma, para receber um retorno é necessário criar uma const com findOne que retornará os dados atualizados.
 - Fazer um cath tendo error como parâmetro, para caso o try dê errado 

Passo 2

 - Avisar no arquivo de notas da classe que há uma nova rota.
 - Criar uma rota put o parâmetro rota deve ter /:id para indicar que ela receberá um id


****

    static async atualizaPessoa(req, res) {
        const { id } = req.params;
        const novaInfo = req.body;
        try {
        
            await database.Pessoas.update(novaInfo, {
                where: {
                    id: Number(id)
                }
            });
            const pessoaAtualizada = await database.Pessoas.findOne( {
                where: {
                    id: Number(id)
                }
            });
            return res.status(200).json(pessoaAtualizada);
        
        } catch (error) {

            return res.status(500).json(error.message);

        }
    }

****

D - Delete

Excluir registros:

Passo 1

 - Fazer uma função statica e assíncrona que terá como parâmetros req e res
 - Criar uma const que indique o id passado para o sequelize, essa const vai receber params.
 - Fazer um try que guardará o resultado do que será excluido do banco (destroy).
  - O destroy receberá como parâmetro o where que indica que o dado será apagado somente se o id solicitado for igual ao encontrado.
 - Fazer um cath tendo error como parâmetro, para caso o try dê errado 

Passo 2

 - Avisar no arquivo de notas da classe que há uma nova rota.
 - Criar uma rota delete o parâmetro rota deve ter /:id para indicar que ela receberá um id

****

    static async deletaPessoa(req, res) {
        const { id } = req.params;
        try {
            
            await database.Pessoas.destroy({
                where: {
                    id: Number(id)
                }
            });
            return res.status(200).json({ mensagem: `id ${id} deletado com sucesso!`});
        } catch (error) {

            return res.status(500).json(error.message);

        }
    }

****